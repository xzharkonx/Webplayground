"""
Django settings for webplayground project.

Generated by 'django-admin startproject' using Django 3.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'blql-37b_u#t-yp!xo7rr+qy#h9l(2g&7*-pae_w(yd8_-cisn'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'registration',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'ckeditor',
    'core',
    'messenger.apps.MessengerConfig',
    'pages.apps.PagesConfig',
    'profiles',
    # Se agrego está app con pip install django-cleanup
    # para que al eliminar un perfil
    # se eliminen sus archivos estáticos, en este caso
    # para que se borre la imagen de perfil de los usuarios.
    'django_cleanup.apps.CleanupConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'webplayground.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'webplayground.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'webplayground',   #En el admin:
        'USER': 'estudiante',       #superuser: zelda
        'PASSWORD': 'zelda1234',    #password: admin1234
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    # }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'es-mx'

TIME_ZONE = 'America/Mexico_City'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

# Se agregaron estás líneas porque en la app registration también tenemos archvos
# estáticos, por ello los cargamos de esta forma. 
# Nombre de la app y la carpeta de archivos estáticos. Pero no fueron necesarias.
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, "static"),
#     '/registration/static/',
# ]

# Auth redirects *****************************************************************

# Para redireccionar la home al hacer login con la app registration
# Pero ya no se utilizó porque Django por default nos redirigirá a la página 
# generia y su url será 'profile', pero está ya la indicamos dentro de la app 
# registration esta url cargara un template con nuestros campos y diseño 
# ya establecidos por nosotros, por lo que comentamos LOGIN_REDIRECT_URL

# LOGIN_REDIRECT_URL = 'pages:pages'
LOGOUT_REDIRECT_URL = 'home'

# Media Files ********************************************************************

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Emails *************************************************************************

# Aplicaremos una tecnica en el que usaremos un servidor SMTP
# Pero en está ocación solo enviara emails y estos se guardarán
# como archivos. Esto nos servira también para el modo OFFLINE.
# Lo haremos de la siguiente forma.

# DOCUMENTACIÓN: https://docs.djangoproject.com/en/2.0/topics/email/#email-backends
# DOCUMENTACIÓN DE TAMPLATES NECESARIOS: https://github.com/django/django/tree/master/django/contrib/admin/templates/registration
# Los templates necesarios son: 
#        password_reset_complete.html
#        password_reset_confirm.html
#        password_reset_done.html
#        password_reset_form.html

#Comprobamos que estamos en modo debug
if DEBUG:
    # Este EMAIL_BACKEND por defecto es el que crea los correos normales
    # pero si los sobreescribimos podemos hacer que estos emails se envién
    # en forma de ficheros, en modo de pruebas o también que salgan por la terminal.

    # Al declararlo hace le decimos que utilice un backendpara los emails basado en ficheros
    # porque los vamos a guardar en ficheros de prueba, no los vamos a enviar de verdad.
    EMAIL_BACKEND = "django.core.mail.backends.filebased.EmailBackend"
    # Ahora tenemos que indicarle donde guardarlos con un EMAIL_FILE_PATH y le pasamos
    # un directorio.
    # Este directorio se creará automaticamente en la raíz de nuestro template.
    EMAIL_FILE_PATH = os.path.join(BASE_DIR, "sent_emails")
else:
    # Aquí hay que configurar un email real para producción.
    # Puede ser Google o mailtrap, etc...
    pass